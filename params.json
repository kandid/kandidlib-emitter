{"name":"Kandidlib-emitter","tagline":"A small Java library providing a typesafe model/listener pattern through class generation","body":"kandidlib-emitter\r\n=================\r\n\r\nA small Java library providing a type safe model/listener pattern through class generation\r\n\r\nThe problem\r\n---------\r\nNeed to implement a model interface in Java/Swing because none of the default classes fit? Tired to implement all those methods to register listeners and loops to send the messages to all listeners?\r\n\r\nIf so, kandidlib-emitter can help you. This small library generates classes performing these tasks. At your preference these classes will be either generated at compile time via an annotation processor or at runtime with a little help from the [asm](http://asm.ow2.org/) lib or both.\r\n\r\n\r\nThe solution\r\n---------\r\n\r\nkandidlib-emitter allows you to take any interface containing only void methods and use it to generate a class where you can register listeners implementing this interface and spread events to them by calling this method. No casting needed.\r\n\r\nAn example shows the principle:\r\n```java\r\npublic class EmitterDemo {\r\n\r\n   // The interface all listeners must implement\r\n   public interface Listener {\r\n      public void bescheid(String text);\r\n   }\r\n\r\n   public static void main(String[] args) {\r\n      // Create the Emitter\r\n      Emitter<Listener> emitter = Emitter.makeEmitter(Listener.class);\r\n\r\n      // Add a listener as dependent to the emitter\r\n      emitter.add(new Listener() {\r\n         @Override\r\n         public void bescheid(String text) {\r\n            System.out.println(\"Hello from the listener with \" + text);\r\n         }\r\n      });\r\n\r\n      // Calls bescheid() for all listeners\r\n      emitter.fire().bescheid(\"greetings from main\");\r\n   }\r\n}\r\n```\r\n\r\nHow to use it\r\n----------\r\nAs mentioned before kandidlib-emitter may be used in two ways, either as an annotation processor in order to generate the necessary classes at compile time or do dynamic generation at runtime.\r\n\r\nIn both cases you can use the `makeEmitter(Class)` method to instantiate an Emitter. \r\n\r\n\r\n### Using runtime generation\r\n* add kandidlib-emitter to your classpath\r\n* add asm-4.2 to your classpath\r\n* instantiate an Emitter with Emitter.makeEmitter(Listener.class)\r\nThis approach is simpler to set up but you must take care if you plan to use an Emitter in an Applet since under normal circumstances this environment prohibits code generation at runtime. Another drawback might be the missing checks for non void methods.\r\n\r\n### Using as an annotation processor\r\n* build the annotation processor jar (see below)\r\n* register the jar as an annotation processor\r\n* mark your interfaces with `@de.kandid.model.Emitter.Listener`\r\n* instantiate them with either Emitter.makeEmitter(Listener.class)\r\n\r\n-or-\r\n\r\n* use the generated class directly\r\n\r\nFollowing this approach requires you to build the kandidlib-emitter.jar and register it as an annotation processor. Usually it should be enough to simply add the jar to the classpath of your compile step.\r\n\r\nDoing so enables you to mark interfaces with the annotation  and the processor generates the Emitter class. The resulting class resides in the same package as the interface and has the same name appended with $Emitter. If the implemented interface is a nested one, the dots are replaced with '$'. Taking the previous example the generated emitter would be named EmitterDemo$Listener$Emitter.\r\n\r\n\r\nBuilding the kandidlib-emitter.jar\r\n---------------------------\r\nThis library uses the [Gradle](http://gradle.org)-1.10 build system. Since I refuse to add the wrapper to the source code, you need to have it installed. Then\r\n```sh\r\ngradle jar\r\n```\r\nproduces the jar containing a manifest which identifies it as an annotation processor. This jar is also the one that must be included in distributions of your application since it also contains the runtime classes.\r\n\r\nImproving kandidlib-emitter\r\n-------------\r\nOf course any IDE may be used to work on kandidlib-emitter but support for gradle makes it more convenient.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}